import random
from Ledger import *
from PaceMaker import *
from Validator import *

validators = Validator.validators
window_size = f
exclude_size = f + 1
reputation_leaders = []


def elect_reputation_leader(qc):
    print("In function: LeaderElection.elect_reputation_leader")
    global window_size, exclude_size
    active_validators = {}
    last_authors = {}
    current_qc = qc
    i = 0
    while i < window_size or len(last_authors) < exclude_size:
        current_block = Ledger.committed_block(current_qc.vote_info.parent_id)
        block_author = current_block.author
        if i < window_size:
            # signers is a set of validator ids
            for signer in current_qc.signature.signers():
                active_validators.add(signer)
        if len(last_authors) < exclude_size:
            # see safety validator id
            last_authors.add(block_author)
        current_qc = current_block.qc
        # backslash means complement set, make sure both are sets
        active_validators -= last_authors
        i += 1
    random.seed(qc.vote_info.round)
    return active_validators.random.choice()


def update_leaders(qc):
    print("In function: LeaderElection.update_leaders")
    global reputation_leaders
    extended_route = qc.vote_info.parent_round
    qc_round = qc.vote_info.round
    current_round = PaceMaker.current_round
    if (extended_route + 1 == qc_round) and (qc_round + 1 == current_round):
        reputation_leaders[current_round + 1] = elect_reputation_leader(qc)


def get_leader(rnd):
    global validators, reputation_leaders
    print("In function: LeaderElection.get_leader")
    if (rnd, leader) in reputation_leaders:
        return leader
    return validators[(rnd / 2) % len(validators)]
