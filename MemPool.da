import queue
import Client
from collections import deque
import Validator

# pool of submitted but not yet executed requests/transactions
_request_pool = queue.Queue()

# cache of recently executed requests/transactions replies
_cached_results = []


def get_transactions():
    # called get_transactions to follow psuedocode, but really get_requests
    # if no pending requests, returns None.
    try:
        req = _request_pool.get_nowait()
        return req
    except queue.Empty:
        return None


def add_request(req):
    print("MemPool add_request called.")
    # first check if this is a retransmitted request

    for (cached_request_id, cached_result) in _cached_results:
        if cached_request_id == req.id:
            print("Sending a cached response.")
            Validator.send_message(
                'reply', (req.id, cached_result), req.client)
            return

    # add request to _request_pool
    print("Adding request to pool")
    _request_pool.put(req)
    print("Added to queue.")


def _cache_reply(request, result):
    # put an executed request in the cache
    for reqid, _ in _cached_results:
        if request.id == reqid:
            # already cached
            return
    _cached_results.appendleft((request.id, result))


def send_reply(req):
    result = "Your cmd: " + req.cmd + " was committed."
    Validator.send_message('reply', (req.id, result), req.client)
    _cache_reply(req, result)
