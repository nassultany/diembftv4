import queue
from Client import *
from collections import deque

# pool of submitted but not yet executed requests/transactions
_request_pool = deque()
send_message = None

#stores prcoess ids of clients
clients = None

# cache of recently executed requests/transactions replies
_cached_results = []
_pending_requests = {}


def get_transactions():
    # called get_transactions to follow psuedocode, but really get_requests
    # if no pending requests, returns None.
        if len(_request_pool) is 0:
            print(f"\033[1;30m QueueEmpty \033[1;37m")
            return None
        print(f'\033[1;30m Sending Mempool Request {_request_pool[0].cmd}, queue size now {len(_request_pool)}\033[1;37m')
        _pending_requests[_request_pool[0].cmd] = _request_pool[0]
        return _request_pool.popleft().cmd


def add_request(req):
    print("MemPool add_request called.")
    # first check if this is a retransmitted request

    for (cached_request_id, cached_result) in _cached_results:
        if cached_request_id == req.id:
            print("Sending a cached response.")
            send_message(
                'reply', (req.id, cached_result), req.client)
            return

    # add request to _request_pool
    print("\033[1;30m Adding request to pool\033[1;37m")
    _request_pool.append(req)
    print("\033[1;30m Added to queue. \033[1;37m")


def _cache_reply(request, result):
    # put an executed request in the cache
    for reqid, _ in _cached_results:
        if request.id == reqid:
            # already cached
            return
    _cached_results.append((request.id, result))


def send_reply(reply):
    result = "Your cmd: " + reply + " was committed."
    req = _pending_requests[reply]
    print(f"Sending Reply to {req.client}")
    send_message("reply", (req.id, result), req.client)
    _cache_reply(req, result)
