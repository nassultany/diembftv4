import BlockTree
import Safety
import nacl.encoding
import nacl.hash
import os
from collections import deque
from pathlib import Path

u = None
filename = None
commits = {}  # stores q_size committed blocks for quick retrieval
q_size = 35  # no of committed blocks remembered
commit_queue = deque()  # stores the last q_size committed blocks
state_id = {}  # description below:


# stores exec_state_id with index as block_id
# stores hash of the exec_state_id of the previous block and transactions of the current block
# commit_state_id can also be obtained from this by referring to the previous block ids
# This is taken care of in the Safety Module when it asks for state_id to populate its LedgerCommitInfo.commit_state_id
# Hence not dealt with here

# We're NOT maintaining a separate pending tree in Ledger as mentioned in the phase 2 document
# We're just executing transactions on whatever exists in the file and returning the hash of file contents


def setup_Ledger():
    global u, filename
    u = Safety.validator_id
    # Add root of speculative ledger tree, corresponding to genesis block
    state_id[BlockTree.genesis_block.id] = nacl.hash.sha256(
        "666999".encode()).decode()
    commits[BlockTree.genesis_block.id] = BlockTree.genesis_block


def speculate(prev_block_id, block_id, txns):
    global state_id
    state_id[block_id] = nacl.hash.sha256(
        (state_id[prev_block_id] + txns).encode()).decode()


def commit(block_id):
    if block_id not in BlockTree.pending_block_tree:
        return
    block = BlockTree.pending_block_tree[block_id].block
    f = open(filename, 'a')
    if block.payload != "":
        f.write(block.payload+"\n")
    f.close()

    commits[block_id] = block  # storing in dictionary for quick retrieval
    # appending to commit_queue for updating other nodes if they fall back
    commit_queue.append(block)
    # deelete element from commit queue and commits for efficient memory usage
    if (len(commit_queue) > q_size):
        # we should store deleted elements in a files
        # f = open(commits_file, 'a')
        # f.write(str(commit_queue[0].id)+'------>'+commit_queue[0].txn)
        # f.close()
        # commits_file.append()
        commits.pop(commit_queue[0].id)
        commit_queue.popleft()

    Safety.log("Committed Block:", f"block_id: {block_id}")
    return block.payload


# PSEUDOCODE for updating other validators
def update_node(block_id):
   missing = []
   if block_id in commits: #This means block id is in memory
       idx = commit_queue.index(block_id)
       missing = [commit_queue[i] for i in range(idx, len(commit_queue)-1)]
   return missing
#    else: (means block_id is in file)
#        idx = index of block_id in file
#        append next transaction onwards till the end of file to missing list
#        append all transactions from commit_queue

def committed_block(block_id):
    if block_id in commits:
        return commits[block_id]


def pending_state(block_id):
    return state_id[block_id]
