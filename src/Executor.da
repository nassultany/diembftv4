import Client
import Run
from pathlib import Path

config(channel='fifo', clock='Lamport')


def main():
    configs = []
    config_folder = Path("./config")
    fname = 'config.csv'
    self.path = config_folder / fname
    with open(self.path, 'r') as file:
        ints = ['num_validators', 'num_clients', 'client_workloads_numrequests', 'client_workloads_delay', 'f',
                'faulty_leader_index']
        bools = ['faulty_leader']
        strings = ['test_case_name']
        separator = '-----'
        run_config = {}
        workloads = []
        for line in file:
            arguments = line.split('=', 4)
            key = arguments[0].strip()
            if key == separator:
                run_config['client_workloads'] = workloads
                configs.append(run_config)
                run_config = {}
                workloads = []
            elif key == 'client_workloads':
                retransmit = arguments[3].strip() == 'True'
                workloads.append(
                    Client.Workload(int(arguments[1].strip()), int(arguments[2].strip()), retransmit))
            elif key in ints:
                run_config[key] = int(arguments[1].strip())
            elif key in bools:
                run_config[key] =arguments[1].strip() == 'True'
            else:
                run_config[key] = arguments[1].strip()
        run_config['client_workloads'] = workloads
        configs.append(run_config)

    for config in configs:
        run = new(Run.Run)
        setup(run, (config,))

        start(run)
        await(each(r in {run}, has=received(('finished_test_case',), from_=r)))
        output(f"Finished all test cases.")
