import Client
import Safety
import Validator
import BlockTree
from collections import deque

client_id_to_process = None
client_process_to_id = None

# pool of submitted but not yet executed requests/transactions
request_pool = []

# cache of recently executed requests/transactions replies
_cached_results = []

# pool of pending requests/transactions (submitted or proposed, but not yet committed)
#pending_requests = set()

block_pending = False

progress_pending_cmd = False


def get_transactions():
    # called get_transactions to follow pseudocode, but really get_requests
    # if no pending requests, returns None.
    if len(request_pool) == 0:
        return ''
    else:
        return_val = request_pool[0]
        request_pool.remove(return_val)
        return return_val.cmd


def remove_from_requests(cmd):
    for req in request_pool:
        if req.cmd == cmd:
            request_pool.remove(req)


def add_request(req):
    # first check if this is a retransmitted request

    for (cmd, cached_result) in _cached_results:
        if req.cmd == cmd:
            # Sending a cached response
            return req.id, cached_result

    # add request to _request_pool
    if req in request_pool:
        # already submitted, don't add duplicate request
        print(
            f"{Safety.validator_id}: Request: {req.cmd} already submitted. Not adding to pool.")
        return
    high_qc_block = BlockTree.pending_block_tree[BlockTree.high_qc.vote_info.id]
    pending_payloads = [
        BlockTree.pending_block_tree[block_id].block.payload for block_id in high_qc_block.children]
    pending_payloads += high_qc_block.block.payload
    # elif req.cmd in pending_requests:
    if req.cmd in pending_payloads:
        # print(f"{Safety.validator_id}: Request: {req.cmd} is already pending. Not adding to pool.")
        return
    request_pool.append(req)
    #block_pending = True
    # pending_requests.add(req.cmd)


def cache_reply(cmd, result):
    # put an executed request in the cache
    for reqcmd, _ in _cached_results:
        if cmd == reqcmd:
            # already cached
            return
    _cached_results.append((cmd, result))
