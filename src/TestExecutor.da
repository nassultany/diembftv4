import NetworkPlayground
from pathlib import Path

config(channel='fifo', clock='Lamport')


class TestExecutor(process):
    def setup(config):
        self.finished = False

    def receive(msg=("GotMessages", msg_list), from_=np):
        output("Received the messages from the NetworkPlayground")
        finished = True

    def run():
        config = {
            'test_case_name': "test_playground",
            'validators': ['A', 'B', 'C', 'D'],
            'f': 1,
            'parent': self
        }

        network_playground = new(NetworkPlayground.NetworkPlayground)
        setup(network_playground, (config,))
        start(network_playground)

        num_validators = 4
        num_rounds = 10
        num, msg_type = num_rounds*num_validators, "VoteMsg"
        # check for right number of messages sent to deduce elapsed rounds
        output(
            "Letting NetworkPlayground know I am waiting for {num} {msg_type}(s).")
        send(("WaitForMessages", (num, msg_type)), to=network_playground)
        if await(finished):
            pass
        elif timeout(4):
            output(
                "TestExecutor timed out waiting for NetworkPlayground.WaitForMessages")
        # Tell network playground to wrap it up
        send(("TerminateValidators",), to=network_playground)
        # then send RunDone to validators (or tell NP to do it?)

        await(each(r in {network_playground}, has=received(('finished_test_case',), from_=r)))
        send(('finished_cases',), to=nodeof(self))
        output(f"Finished all test cases.")


def main():
    executor = new(TestExecutor)
    config = dict()
    setup(executor, (config,))
    start(executor)
    output("Here waiting")
    await(each(e in {executor}, has=received(('finished_cases',), from_=e)))
    output("Done waiting")
    output("Finished all test cases.")
