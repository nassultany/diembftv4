import BlockTree
import Safety
import Validator
import MemPool
import time
from collections import defaultdict

# PSEUDOCODE(current_round;
# last_round_tc;
# pending_timeouts;)
current_round = 1
last_round_tc = None
pending_timeouts = defaultdict(list)
delta = 1


def get_round_timer(r):
    # print(f"{Safety.validator_id}: In function: PaceMaker.get_round_timer")
    # PSEUDOCODE(return round timer formula)
    return 4 * delta


def start_timer(new_round):
    # print(f"{Safety.validator_id}: In function: PaceMaker.start_timer")
    global current_round
    #  PSEUDOCODE(stop_timer(current_round))
    stop_timer(current_round)
    # PSEUDOCODE(current_round <- new_round)
    current_round = new_round
    # print(f"{Safety.validator_id}: Timer started for round: {current_round}")


def local_timeout_round():
    global current_round
    # print(f"{Safety.validator_id}: In function: PaceMaker.local_timeout_round")
    # PSEUDOCODE(save_consensus_state())
    save_consensus_state()
    # PSEUDOCODE(timout_info <- Safety.make_timeout(current_round, Block-Tree.high_qc, last_round_tc))
    timeout_info = Safety.make_timeout(
        current_round, BlockTree.high_qc, last_round_tc)
    # PSEUDOCODE(broadcast TimeoutMsg(timeout_info, last_round_tc, Block-Tree.high_commit_qc))
    # Can't actually send message from here, instead return it to validator and send it from there
    return BlockTree.TimeoutMsg(timeout_info, last_round_tc, BlockTree.high_commit_qc)


def process_remote_timeout(tmo):
    # tmo is a timeout message
    # print(f"{Safety.validator_id}: In function: PaceMaker.process_remote_timeout. {Safety.validator_id}")
    global current_round, pending_timeouts
    # PSEUDOCODE(tmo_info <- tmo.tmo_info)
    tmo_info = tmo.tmo_info
    # PSEUDOCODE(if tmo_info.round < current_round then)
    if tmo_info.round < current_round:
        # PSEUDOCODE(return None)
        return None, None
    # PSEUDOCODE(if tmo_info.sender not in pending_timeouts[tmo_info_round].senders then)
    if len(pending_timeouts[tmo_info.round]) == 0:
        # PSEUDOCODE(pending_timeouts[tmo_info.round] <- pending_timeouts[tmo_info.round] union {tmo.info})
        pending_timeouts[tmo_info.round].append(tmo_info)
        return None, None
    try:
        senders = [thetmo.sender for thetmo in pending_timeouts[tmo_info.round]]
    except:
        print(f"\t\t\t\t\tFAILED HERE {Safety.validator_id}")
    if tmo_info.sender not in senders:
        pending_timeouts[tmo_info.round].append(tmo_info)

    # PSEUDOCODE(if |pending_timeouts[tmo_info.round].senders| == f + 1 then)
    if len(pending_timeouts[tmo_info.round]) == BlockTree.f + 1:
        # PSEUDOCODE(stop_timer(current_round))
        stop_timer(current_round)
        # PSEUDOCODE(local_timeout_round())
        return None, local_timeout_round()
    # PSEUDOCODE(if |pending_timeouts[tmo_info.round].senders| == 2f + 1 then)
    if len(pending_timeouts[tmo_info.round]) == 2 * BlockTree.f + 1:
        # PSEUDOCODE(return TC(
        #     round <- tmo_info.round,
        #     tmo_high_qc_rounds <- {t.high_qc.round | t in pending_timeouts[tmo_info.round]},
        #     signatures <- {t.signature | t in pending_timeouts[tmo_info.round]}))
        high_qc_rounds = []
        for info in pending_timeouts[tmo_info.round]:
            high_qc_rounds.append(info.high_qc.vote_info.round)
        signatures = []
        for info in pending_timeouts[tmo_info.round]:
            signatures.append((info.sender, info.signature))
        return BlockTree.TC(tmo_info.round, high_qc_rounds, signatures), None
    # PSEUDOCODE(return None)
    return None, None


def stop_timer(r):
    # print(f"{Safety.validator_id}: In function: PaceMaker.stop_timer")
    pass


def advance_round_tc(tc):
    # print(f"{Safety.validator_id}: In function: PaceMaker.advance_round_tc. {Safety.validator_id}")
    global current_round, last_round_tc
    # PSEUDOCODE(if tc = None or tc.round < current_round then)
    if tc is None or tc.round < current_round:
        # PSEUDOCODE(return false)
        return False

    MemPool.block_pending = False
    # for blocknode in BlockTree.pending_block_tree.values():
    #     if blocknode.block.round == current_round-2:
    #         try:
    #             MemPool.pending_requests.remove(blocknode.block.payload)
    #         except:
    #             # catch if cmd not in pending_requests
    #             pass

    # #PSUEDOCODE(last_round_tc <- tc)
    last_round_tc = tc
    # PSEUDOCODE(start_timer(tc.round + 1))
    start_timer(tc.round + 1)
    # PSEUDOCODE(return true)
    return True


def save_consensus_state():
    # print(f"{Safety.validator_id}: In function: PaceMaker.save_consensus_state")
    pass


def advance_round_qc(qc):
    global current_round, last_round_tc
    # print(f"{Safety.validator_id}: In function: PaceMaker.advance_round_qc")
    #  if qc.vote_info.round < current_round then
    if qc.vote_info.round < current_round:
        # return false
        return False
    # last_round_tc <- None
    last_round_tc = None
    # start_timer(qc.vote_info.round + 1)
    start_timer(qc.vote_info.round + 1)
    # return true
    return True
