import LeaderElection
import Ledger
import MemPool
import PaceMaker
import Safety
import nacl.encoding
import nacl.hash
from collections import defaultdict
from collections import deque


class Block:
    def __init__(self, author, round, payload, qc, id):
        self.author = author
        self.round = round
        self.payload = payload
        self.qc = qc
        self.id = id

    def __str__(self):
        return f"Author: {self.author}, Round: {self.round}, Payload: {self.payload}, ID: {self.id}, QC: {{ {self.qc} }}"


class LedgerCommitInfo:
    def __init__(self, commit_state_id, vote_info_hash):
        self.commit_state_id = commit_state_id
        self.vote_info_hash = vote_info_hash

    def __str__(self):
        return f"commit_state_id: {self.commit_state_id}"


class ProposalMsg:
    def __init__(self, block, last_round_tc, high_commit_qc):
        self.block = block
        self.last_round_tc = last_round_tc
        self.high_commit_qc = high_commit_qc
        # signing_key expected in Safety module
        self.signature = Safety.get_private_key().sign(block.id.encode())

    def __str__(self):
        return f"Block: {{ {self.block} }}, last_round_tc: {{ {self.last_round_tc} }}, high_commit_qc: {{ {self.high_commit_qc} }}"


class QC:
    def __init__(self, vote_info, ledger_commit_info, signatures, author):
        self.vote_info = vote_info
        self.ledger_commit_info = ledger_commit_info
        #self.high_commit_qc = high_commit_qc
        self.signatures = signatures
        self.author = author
        # self.author_signature = Safety.signing_key.sign(
        #    signatures)  # signing_key expected in Safety module
        if signatures:
            self.author_signature = Safety.get_private_key().sign(
                b''.join([signature for (signer, signature) in signatures]))
        else:
            self.author_signature = None

    def signers(self):
        try:
            qc_signers = [validator_id for (
                validator_id, _) in self.signatures]
            return qc_signers
        except:
            return None

    def __str__(self):
        return f"author: {self.author}, signatures: {self.signers()}, vote_info: {{ {self.vote_info} }} }}"


class TimeoutMsg:
    def __init__(self, tmo_info, last_round_tc, high_commit_qc):
        self.tmo_info = tmo_info
        self.last_round_tc = last_round_tc
        self.high_commit_qc = high_commit_qc


class TC:
    def __init__(self, round, tmo_high_qc_rounds, tmo_signatures):
        self.round = round
        self.tmo_high_qc_rounds = tmo_high_qc_rounds
        self.tmo_signatures = tmo_signatures

    def __str__(self):
        return f"round: {self.round}, tmo_high_qc_rounds: {self.tmo_high_qc_rounds}"


class TimeoutInfo:
    def __init__(self, round, high_qc, sender):
        self.round = round
        self.high_qc = high_qc
        self.sender = sender
        # signing_key expected in Safety module
        self.signature = Safety.get_private_key().sign((round, high_qc.vote_info.round))

    def __str__(self):
        return f"sender: {self.sender}, round: {self.round}, high_qc: {{ {self.high_qc} }}, signature: {self.signature}"


class VoteInfo:
    def __init__(self, id, round, parent_id, parent_round, exec_state_id):
        self.id = id
        self.round = round
        self.parent_id = parent_id
        self.parent_round = parent_round
        self.exec_state_id = exec_state_id

    def __str__(self):
        return f"id: {self.id}, round: {self.round}, parent_id: {self.parent_id}, parent_round: {self.parent_round}, exec_state_id: {self.exec_state_id}"


class VoteMsg:
    def __init__(self, vote_info, ledger_commit_info, high_commit_qc):
        self.vote_info = vote_info
        self.ledger_commit_info = ledger_commit_info
        self.high_commit_qc = high_commit_qc
        self.sender = Safety.validator_id
        # signing_key expected in Safety module
        if ledger_commit_info.commit_state_id:
            self.signature = Safety.get_private_key().sign(
                (ledger_commit_info.commit_state_id + ledger_commit_info.vote_info_hash).encode())
        else:
            self.signature = Safety.get_private_key().sign(
                ledger_commit_info.vote_info_hash.encode())

    def __str__(self):
        return f"vote_info: {self.vote_info}, ledger_commit_info: {self.ledger_commit_info}, high_commit_qc: {self.high_commit_qc}"


class BlockNode:
    def __init__(self, block, children=None):
        self.block = block
        if children is None:
            self.children = []


# PSEUDOCODE(high_commit_qc;)
high_commit_qc = None
# PSEUDOCODE(high_qc;)
high_qc = None
# PSEUDOCODE(pending_block_tree;)
pending_block_tree = {}  # Use a dictionary, indexed by block id
# Declaring as dictionary for quick search
last_block = None
# PSEUDOCODE(pending_votes;)
pending_votes = defaultdict(list)
vote_idx = None
f = None

genesis_block = None
genesis_qc = None


# Must be called after Safety is setup
def setup_BlockTree():
    global f, high_qc, genesis_block, genesis_qc, last_block
    f = Safety.f
    # Create genesis block and genesis QC (to link to genesis block for advancement from round 0)
    # genesis block is the root of the pending blocktree
    genesis_blockid = nacl.hash.sha256(str(666).encode()).decode()
    genesis_block = Block(author=None, round=0, payload='',
                          qc=None, id=genesis_blockid)

    last_block = genesis_block
    # should everyone start with QC(0), or only leader embed it in Block(1)?
    # try everyone starting with it
    genesis_qc_vote_info = VoteInfo(
        id=genesis_blockid, round=0, parent_id=None, parent_round=None, exec_state_id=None)
    genesis_qc = QC(vote_info=genesis_qc_vote_info,
                    ledger_commit_info=None, signatures=None, author=None)
    genesis_block_node = BlockNode(genesis_block)
    pending_block_tree[genesis_blockid] = genesis_block_node
    high_qc = genesis_qc
    Ledger.commit_queue.append(genesis_block)


def pending_block_tree_prune(newroot_id):
    global pending_block_tree
    nodes_to_keep = []
    children = pending_block_tree[newroot_id].children
    while len(children) > 0:
        curr = children.pop(0)
        if curr is None:
            continue
        nodes_to_keep.append(pending_block_tree[curr])
        # keep its children as well
        children += pending_block_tree[curr].children
    # remove them from pending list as well
    keep_ids = [x.block.id for x in nodes_to_keep]
    cmds_to_prune = [
        pending_block_tree[x].block.payload for x in pending_block_tree if x not in keep_ids]
    pending_block_tree.clear()
    for node in nodes_to_keep:
        pending_block_tree[node.block.id] = node


def get_updates(block_id):
    missing = Ledger.get_update_info(block_id)
    return missing, pending_block_tree


def update_node(missing_commits, pending_tree):
    pending_block_tree = pending_tree
    Ledger.update(missing_commits)


def process_qc(qc):
    global pending_block_tree, high_commit_qc, high_qc
    if (qc is not None) and (qc.author_signature is not None) and (not Safety.valid_signature(Safety.get_public_key(str(qc.author)), qc.author_signature)):
        output('Not correct signature, QC will not be processed')

    committed_request = None
    # If received genesis QC and round is 0, return because genesis QC is already highqc and has no info
    if (qc.vote_info.round == 0 and PaceMaker.current_round == 1) or qc.ledger_commit_info == None:
        return
    # PSEUDOCODE(if qc.ledger_commit_info.commit_state_id != None then)
    if qc.ledger_commit_info.commit_state_id and (qc.vote_info.parent_id not in Ledger.commits):
        # included additional check to prevent committing an already committed block

        # PSEUDOCODE(Ledger.commit(qc.vote_info.parent_id))
        committed_request = Ledger.commit(qc.vote_info.parent_id)
        if committed_request:
            # PSEUDOCODE(pending_block_tree.prune(qc.vote_info.parent_id))
            pending_block_tree_prune(qc.vote_info.parent_id)
        # PSEUDOCODE(high_commit_qc < - maxround{qc, high_commit_qc})
        if high_commit_qc:
            if qc.vote_info.round > high_commit_qc.vote_info.round:
                high_commit_qc = qc
        else:
            high_commit_qc = qc
    # PSEUDOCODE(high_qc < - maxround{qc, high_qc})
    if qc.vote_info.round > high_qc.vote_info.round:
        high_qc = qc
    return committed_request


# sequence of the following function has been changed as we are not maintaining any speculate tree in Ledger


def execute_and_insert(b):
    global pending_block_tree
    # PSEUDOCODE(Ledger.speculate(b.qc.block_id, b.id, b.payload))
    Ledger.speculate(b.qc.vote_info.id, b.id, b.payload)
    block_node = BlockNode(b)
    pending_block_tree[b.id] = block_node
    # Add itself to children of parent block (simulating a tree)
    # PSEUDOCODE(pending_block_tree.add(b))
    pending_block_tree[b.qc.vote_info.id].children.append(b.id)
    global last_block
    last_block = b


def verify_signature(v):
    verify_key = Safety.get_public_key(v.sender)
    if verify_key is None:
        return False
    try:
        verify_key.verify(v.signature)
    except:
        print('Incorrect Signature')
        return False
    return True


def process_vote(v):  # v is of type VoteMsg
    global pending_votes, f
    if v.high_commit_qc is not None:
        # PSEUDOCODE(process_qc(v.high_commit_qc))
        process_qc(v.high_commit_qc)
    commit_state_id = v.ledger_commit_info.commit_state_id
    if commit_state_id:
        # PSEUDOCODE(vote_idx <- hash(v.ledger_commit_info))
        vote_idx = nacl.hash.sha256(
            (v.ledger_commit_info.commit_state_id + v.ledger_commit_info.vote_info_hash).encode()).decode()
    else:
        vote_idx = nacl.hash.sha256(
            v.ledger_commit_info.vote_info_hash.encode()).decode()
    if verify_signature(v):
        # PSEUDOCODE(pending_votes[vote_idx] <- pending_votes[vote_idx] union v.signature)
        pending_votes[vote_idx].append((v.sender, v.signature))
        # PSEUDOCODE(if | pending_votes[vote_idx | = 2f + 1 then)
        if len(pending_votes[vote_idx]) == 2 * f + 1:
            # print("Making QC")
            # PSEUDOCODE(qc < - QC(
            #     vote_info <- v.vote_info,
            #     state_id <- v.state_id,
            #     votes <- pending_votes[vote_idx]))
            Safety.log("Making QC,", "")
            qc = QC(v.vote_info, v.ledger_commit_info, pending_votes[vote_idx],
                    Safety.validator_id)
            # PSEUDOCODE(return qc)
            return qc
    # PSEUDOCODE(return None)
    return None


def generate_block(txns, current_round):
    global high_commit_qc, high_qc
    # PSEUDOCODE(return Block(
    #     author <- u
    #     round <- current_round
    #     payload <- txns
    #     qc <- high_qc
    #     id <- hash(author || round || payload || qc.vote_info.id || qc.signatures)))
    qc = high_qc
    segment_1 = nacl.hash.sha256(
        (Safety.validator_id + "-" + str(current_round) + "-" + txns + str(qc.vote_info.id)).encode())
    if qc.vote_info.round == 0:
        # no signatures in the genesis QC, so skip segment 2
        segment_2 = b''
    else:
        segment_2 = nacl.hash.sha256(
            b''.join([str(signer).encode() + sig for (signer, sig) in qc.signatures]))

    block_id = nacl.hash.sha256(segment_1 + segment_2).decode()
    b = Block(author=Safety.validator_id, round=current_round,
              payload=txns, qc=qc, id=block_id)
    return b
